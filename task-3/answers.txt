1. Когда используются контейнеры типа (мульти) множество и отображение?
Используются для хранения связанных пар "ключ-значение" ("key-value"). 
Эффективны для поиска.


2. Каким требованиям должна удовлетворять качественная хэш-функция?
· результат работы хеш-функции должен зависеть от всех двоичных 
символов исходного сообщения, а также от их взаимного расположения;
· должна быть чувствительна к любым изменениям входной 
информационной последовательности: при любых изменениях на входе 
результат действия хеш-функции должен быть непредсказуем.
· хеш-функция должна быть односторонней, т.е. функцией, по значению 
которой вычислительно трудно найти ее аргумент;
· как можно меньше коллизий;
· быстрое вычисление;


3. Из-за чего в хэш-таблицах возникают коллизии и как можно их разрешить?
Коллизии возникают, потому что хэш-функции не идеальны.
Разрешить можно с помощью:
· Открытой адресации. По заранее оговоренному правилу ищем свободное 
место в таблице.
· Метода цепочек. Храним в таблице не сами ключи, а списки ключей с 
одинаковыми хэшами. 


4. Почему сложность основных операций хэш-таблиц в худшем случае O(N)?
Потому что не нужно пробегать весь пакет данных, чтобы найти конкретный 
элемент, то есть сложность не зависит от колтчества элементов, значит, 
константа -- О(1).
Если есть коллизии, то сложность уже O(N) (худший случай), так как, 
например, при методе цепочек у нас в дальнейшем идет поиск (перебор) 
по цепочке.


5. Что позволяет сделать инструмент создания контейнеров 
Boost.Multiindex?
Boost.MultiIndex позволяет определять контейнеры, поддерживающие 
произвольное количество интерфейсов.
