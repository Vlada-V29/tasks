1. Одно умножается на другое, и берется остаток от деления
на третье. 
Есть зерно (seed), которое задает начальное значение для функции выше. 
Значение для зерна берется из системного времени, флуктуаций напряжения, 
интервалов между нажатиями клавиш и тд.


2. Функциональные объекты могут хранить внутренние состояния. 


3. Итераторы:
- Итератор ввода (input iterator) предназначен только для однократного 
чтения (ввода) последовательности значений. 
- Итератор вывода (output iterator) предназначен только для однократной 
записи (вывода) последовательности. В остальном аналогичен итератору ввода.
- Однонаправленный итератор (forward iterator) является расширением концепции 
“итератор ввода”, т.е. предоставляет возможности итератора ввода (и, возможно, 
но не гарантированно, итератора вывода). Кроме того, однонаправленный итератор 
допускает многократное чтение и запись линейной последовательности, по которой 
можно двигаться только в одну сторону (как по односвязному списку — “вперёд” 
с помощью операции ++).
- Двунаправленный итератор bidirectional iterator является расширением концепции 
“однонаправленный итератор”. Двунаправленный итератор допускает движение в двух 
направлениях: вперед (с помощью ++) и назад (с помощью операции --).
- Итератор произвольного доступа random access iterator является расширением 
концепции “двунаправленный итератор” и наиболее похож по своему поведению на 
обычный указатель на элемент массива (который является частным случаем итератора 
произвольного доступа). Допускает адресацию по индексу (оператор []), сдвиг в обе 
стороны на некоторое количество позиций (добавление и вычитание целого числа), 
вычисление расстояния с помощью вычитания и сравнение на “меньше” и “больше” 
(согласованное с расстоянием, которое имеет знак).


4. Алгоритмы:
- Инспекторы — используются для просмотра (без изменений) данных в 
контейнере (например, операции поиска или подсчета элементов).
- Мутаторы — используются для изменения данных в контейнере 
(например, операции сортировки или перестановки элементов).
- Фасилитаторы — используются для генерации результата на основе 
значений элементов данных (например, объекты, которые умножают значения, 
либо объекты, которые определяют, в каком порядке пары элементов должны 
быть отсортированы).


5. Они сделают код проще и надежнее.